{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Projetos\\\\Reposit\\xF3rios GitHub\\\\NLW4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nimport { ModalLevelUp } from '../components/ModalLevelUp';\nexport const challengeContext = /*#__PURE__*/createContext({});\nexport function ChallengersProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$ChallengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setlevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: ChallengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$ChallengesCompl = rest.ChallengesCompleted) !== null && _rest$ChallengesCompl !== void 0 ? _rest$ChallengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const [isLevelUpModalOpen, set];\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('ChallengesCompleted', String(ChallengesCompleted));\n  }, [level, currentExperience, ChallengesCompleted]);\n\n  function LevelUp() {\n    setlevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio ', {\n        icon: '/favicon.png',\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallege() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n    setChallengesCompleted(ChallengesCompleted + 1);\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      LevelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(ChallengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(challengeContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      ChallengesCompleted,\n      activeChallenge,\n      experienceToNextLevel,\n      LevelUp,\n      startNewChallenge,\n      resetChallenge,\n      completeChallege\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(ModalLevelUp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["D:/Projetos/RepositÃ³rios GitHub/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","ModalLevelUp","challengeContext","ChallengersProvider","children","rest","level","setlevel","currentExperience","setCurrentExperience","ChallengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","set","experienceToNextLevel","Math","pow","Notification","requestPermission","String","LevelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","icon","body","amount","resetChallenge","completeChallege","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport challenges from '../../challenges.json';\r\nimport { ModalLevelUp } from '../components/ModalLevelUp';\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface challengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    ChallengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel: number;\r\n    LevelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completeChallege: () => void;\r\n}\r\n\r\ninterface Challengersproviderprops {\r\n    children: ReactNode;\r\n    level: number;\r\n    currentExperience: number;\r\n    ChallengesCompleted: number;\r\n}\r\n\r\nexport const challengeContext = createContext({} as challengesContextData);\r\n\r\nexport function ChallengersProvider({\r\n    children,\r\n    ...rest\r\n}: Challengersproviderprops) {\r\n    const [level, setlevel] = useState(rest.level ?? 1);\r\n    const [currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0);\r\n    const [ChallengesCompleted, setChallengesCompleted] = useState(rest.ChallengesCompleted ?? 0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n    const [isLevelUpModalOpen, set]\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        Cookies.set('level', String(level));\r\n        Cookies.set('currentExperience', String(currentExperience));\r\n        Cookies.set('ChallengesCompleted', String(ChallengesCompleted));\r\n    }, [level, currentExperience, ChallengesCompleted]);\r\n\r\n    function LevelUp() {\r\n        setlevel(level + 1);\r\n\r\n    }\r\n\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge);\r\n        \r\n        new Audio('/notification.mp3').play();\r\n\r\n        if(Notification.permission === 'granted') {\r\n            new Notification('Novo Desafio ', {\r\n                icon: '/favicon.png',\r\n                body: `Valendo ${challenge.amount}xp!`,\r\n            })\r\n        }\r\n    }\r\n\r\n    function resetChallenge() {\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallege() {\r\n        if(!activeChallenge) {\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        setChallengesCompleted(ChallengesCompleted + 1);\r\n\r\n        if(finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            LevelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengesCompleted(ChallengesCompleted + 1);\r\n    }\r\n\r\n    return (\r\n        <challengeContext.Provider \r\n        value={{\r\n            level, \r\n            currentExperience, \r\n            ChallengesCompleted,\r\n            activeChallenge,\r\n            experienceToNextLevel,\r\n            LevelUp,\r\n            startNewChallenge,\r\n            resetChallenge,\r\n            completeChallege,\r\n            }}>\r\n            {children}\r\n            <ModalLevelUp />\r\n        </challengeContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}