{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Projetos\\\\Reposit\\xF3rios GitHub\\\\NLW4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport var challengeContext = /*#__PURE__*/createContext({});\nexport function ChallengersProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setlevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      ChallengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function LevelUp() {\n    setlevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio ', {\n        icon: '/favicon.png',\n        body: \"Valendo \".concat(challenge.amount, \"xp!\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallege() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n    setChallengesCompleted(ChallengesCompleted + 1);\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      LevelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(ChallengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(challengeContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      ChallengesCompleted: ChallengesCompleted,\n      activeChallenge: activeChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      LevelUp: LevelUp,\n      startNewChallenge: startNewChallenge,\n      resetChallenge: resetChallenge,\n      completeChallege: completeChallege\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengersProvider, \"NKPfD9503LR37dxEk0q7k7Q4Tyk=\");\n\n_c = ChallengersProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengersProvider\");","map":{"version":3,"sources":["D:/Projetos/RepositÃ³rios GitHub/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","challengeContext","ChallengersProvider","children","level","setlevel","currentExperience","setCurrentExperience","ChallengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","LevelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","icon","body","amount","resetChallenge","completeChallege","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface challengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    ChallengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel: number;\r\n    LevelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completeChallege: () => void;\r\n}\r\n\r\ninterface Challengersproviderprops {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const challengeContext = createContext({} as challengesContextData);\r\n\r\nexport function ChallengersProvider({children}: Challengersproviderprops) {\r\n    const [level, setlevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [ChallengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n    function LevelUp() {\r\n        setlevel(level + 1);\r\n    }\r\n\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge);\r\n        \r\n        new Audio('/notification.mp3').play();\r\n\r\n        if(Notification.permission === 'granted') {\r\n            new Notification('Novo Desafio ', {\r\n                icon: '/favicon.png',\r\n                body: `Valendo ${challenge.amount}xp!`,\r\n            })\r\n        }\r\n    }\r\n\r\n    function resetChallenge() {\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallege() {\r\n        if(!activeChallenge) {\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        setChallengesCompleted(ChallengesCompleted + 1);\r\n\r\n        if(finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            LevelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengesCompleted(ChallengesCompleted + 1);\r\n    }\r\n\r\n    return (\r\n        <challengeContext.Provider \r\n        value={{\r\n            level, \r\n            currentExperience, \r\n            ChallengesCompleted,\r\n            activeChallenge,\r\n            experienceToNextLevel,\r\n            LevelUp,\r\n            startNewChallenge,\r\n            resetChallenge,\r\n            completeChallege,\r\n            }}>\r\n            {children}\r\n        </challengeContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}