{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"D:/Projetos/Reposit\\xF3rios GitHub/NLW4/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\Projetos\\\\Reposit\\xF3rios GitHub\\\\NLW4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var challengeContext = /*#__PURE__*/createContext({});\nexport function ChallengersProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setlevel = _useState[1];\n\n  var _useState2 = useState(0),\n      CurrentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      ChallengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _ref2,\n      _ref3 = _slicedToArray(_ref2, 2),\n      activeChallenge = _ref3[0],\n      ser = _ref3[1];\n\n  function LevelUp() {\n    setlevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n  }\n\n  return /*#__PURE__*/_jsxDEV(challengeContext.Provider, {\n    value: {\n      level: level,\n      CurrentExperience: CurrentExperience,\n      ChallengesCompleted: ChallengesCompleted,\n      LevelUp: LevelUp,\n      startNewChallenge: startNewChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengersProvider, \"VvNvf337HD7mRegrIzweHmlE9x0=\");\n\n_c = ChallengersProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengersProvider\");","map":{"version":3,"sources":["D:/Projetos/RepositÃ³rios GitHub/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","challengeContext","ChallengersProvider","children","level","setlevel","CurrentExperience","setCurrentExperience","ChallengesCompleted","setChallengesCompleted","activeChallenge","ser","LevelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAcA,OAAO,IAAMC,gBAAgB,gBAAGH,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASI,mBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC5CJ,QAAQ,CAAC,CAAD,CADoC;AAAA,MAC/DK,KAD+D;AAAA,MACxDC,QADwD;;AAAA,mBAEpBN,QAAQ,CAAC,CAAD,CAFY;AAAA,MAE/DO,iBAF+D;AAAA,MAE5CC,oBAF4C;;AAAA,mBAGhBR,QAAQ,CAAC,CAAD,CAHQ;AAAA,MAG/DS,mBAH+D;AAAA,MAG1CC,sBAH0C;;AAAA;AAAA;AAAA,MAK/DC,eAL+D;AAAA,MAK9CC,GAL8C;;AAOtE,WAASC,OAAT,GAAmB;AACfP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA6B;AACzB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAGH;;AAID,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AACA,IAAA,KAAK,EAAE;AAACV,MAAAA,KAAK,EAALA,KAAD;AAAQE,MAAAA,iBAAiB,EAAjBA,iBAAR;AAA2BE,MAAAA,mBAAmB,EAAnBA,mBAA3B;AAAgDI,MAAAA,OAAO,EAAPA,OAAhD;AAAyDC,MAAAA,iBAAiB,EAAjBA;AAAzD,KADP;AAAA,cAEKV;AAFL;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA1BeD,mB;;KAAAA,mB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface challengesContextData {\r\n    level: number;\r\n    CurrentExperience: number;\r\n    ChallengesCompleted: number;\r\n    LevelUp: () => void;\r\n    startNewChallenge: () => void;\r\n}\r\n\r\ninterface Challengersproviderprops {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const challengeContext = createContext({} as challengesContextData);\r\n\r\nexport function ChallengersProvider({children}: Challengersproviderprops) {\r\n    const [level, setlevel] = useState(1);\r\n    const [CurrentExperience, setCurrentExperience] = useState(0);\r\n    const [ChallengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, ser]\r\n\r\n    function LevelUp() {\r\n        setlevel(level + 1);\r\n    }\r\n\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <challengeContext.Provider \r\n        value={{level, CurrentExperience, ChallengesCompleted, LevelUp, startNewChallenge}}>\r\n            {children}\r\n        </challengeContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}