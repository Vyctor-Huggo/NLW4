{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Projetos\\\\Reposit\\xF3rios GitHub\\\\NLW4\\\\moveit-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport const challengeContext = /*#__PURE__*/createContext({});\nexport function ChallengersProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setlevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: ChallengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('ChallengesCompleted', String(ChallengesCompleted));\n  }, [level, currentExperience, ChallengesCompleted]);\n\n  function LevelUp() {\n    setlevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio ', {\n        icon: '/favicon.png',\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallege() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n    setChallengesCompleted(ChallengesCompleted + 1);\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      LevelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(ChallengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(challengeContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      ChallengesCompleted,\n      activeChallenge,\n      experienceToNextLevel,\n      LevelUp,\n      startNewChallenge,\n      resetChallenge,\n      completeChallege\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["D:/Projetos/RepositÃ³rios GitHub/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","challengeContext","ChallengersProvider","children","level","setlevel","currentExperience","setCurrentExperience","ChallengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","LevelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","icon","body","amount","resetChallenge","completeChallege","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge {\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface challengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    ChallengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel: number;\r\n    LevelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    completeChallege: () => void;\r\n}\r\n\r\ninterface Challengersproviderprops {\r\n    children: ReactNode;\r\n    level: number;\r\n    currentExperience: number;\r\n    ChallengesCompleted: number;\r\n}\r\n\r\nexport const challengeContext = createContext({} as challengesContextData);\r\n\r\nexport function ChallengersProvider({children\r\n}: Challengersproviderprops) {\r\n    const [level, setlevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [ChallengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        Cookies.set('level', String(level));\r\n        Cookies.set('currentExperience', String(currentExperience));\r\n        Cookies.set('ChallengesCompleted', String(ChallengesCompleted));\r\n    }, [level, currentExperience, ChallengesCompleted]);\r\n\r\n    function LevelUp() {\r\n        setlevel(level + 1);\r\n    }\r\n\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge);\r\n        \r\n        new Audio('/notification.mp3').play();\r\n\r\n        if(Notification.permission === 'granted') {\r\n            new Notification('Novo Desafio ', {\r\n                icon: '/favicon.png',\r\n                body: `Valendo ${challenge.amount}xp!`,\r\n            })\r\n        }\r\n    }\r\n\r\n    function resetChallenge() {\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallege() {\r\n        if(!activeChallenge) {\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        setChallengesCompleted(ChallengesCompleted + 1);\r\n\r\n        if(finalExperience >= experienceToNextLevel) {\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            LevelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengesCompleted(ChallengesCompleted + 1);\r\n    }\r\n\r\n    return (\r\n        <challengeContext.Provider \r\n        value={{\r\n            level, \r\n            currentExperience, \r\n            ChallengesCompleted,\r\n            activeChallenge,\r\n            experienceToNextLevel,\r\n            LevelUp,\r\n            startNewChallenge,\r\n            resetChallenge,\r\n            completeChallege,\r\n            }}>\r\n            {children}\r\n        </challengeContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}